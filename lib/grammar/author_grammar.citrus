grammar AuthorGrammar
  include CommonGrammar

  rule author_names
    (author (s author_separator s author)* suffix? s) {
      value = {:names => captures[:author].map(&:to_s)}
      value[:suffix] = suffix.to_s if suffix
      value
    }
  end

  rule author
    !suffix name_phrase (',' initial+)? author_suffix?
  end

  rule author_suffix
    (', Jr' '.'?) | ', II'
  end

  rule author_separator
    ';' | ',' | '&'
  end

  rule initial
    s ('dos' | 'da' | 'de' | 'di' | 'del' | 'do') |
    s name_char '.'? '-' name_char '.' |
    s name_char '.' |
    s name_char_without_period_but_before_semicolon
  end

  rule suffix
    et_al role | et_al | role
  end

  rule role
    s '(' [^)]+ ')'
  end

  rule et_al
    ', '? s 'et al.'
  end

  rule name_phrase
    name_word (s name_word)*
  end

  rule name_word
    name_char+ '.'?
  end

  rule name_char
    /[^[:punct:][:digit:]\s]/ | /[\-\']/
  end

  rule name_char_without_period_but_before_semicolon
    /[\-\'\w](?=;)/u
  end
end
