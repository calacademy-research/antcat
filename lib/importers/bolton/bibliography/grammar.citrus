grammar Bolton::Bibliography::Grammar
  include CommonGrammar
  include PaginationGrammar

  rule reference
    nested_reference | book_reference | article_reference | unknown_reference
  end

  rule unknown_reference
    (authors citation_year '.'? ' '? title_and_citation:(.*)) {
      {
        :title => title_and_citation.to_s,
        :citation_year => citation_year.to_s,
        :authors => authors.strip,
        :reference_type => 'UnknownReference'
      }
    }
  end

  rule nested_reference
    (authors citation_year '.'? ' '? nested_title nested_pagination '. ' 'In ' nested_citation) {
      {
        :title => nested_title.strip,
        :citation_year => citation_year.to_s,
        :pagination => nested_pagination.strip,
        :authors => authors.strip,
        :reference_type => 'NestedReference'
      }
    }
  end

  rule nested_pagination
    '(' pagination ')'
  end

  rule nested_title
    /.*(?=\(p)/
  end

  rule nested_citation
    .*
  end

  rule article_reference
    (authors citation_year '.'? ' '? article_title journal ' '? series_volume_issue ': ' pagination ('.' | ',') (' ' note)?) {
      value = 
        { :authors => authors.strip,
          :citation_year => citation_year.to_s,
          :title => article_title.to_s,
          :journal => journal.to_s,
          :series_volume_issue => series_volume_issue.to_s,
          :pagination => pagination.to_s,
          :reference_type => 'ArticleReference'
        }
      value[:note] = note.value if note
      value
    }
  end

  rule article_title
    ((unformatted_phrase | italicized_phrase) !(' '? series_volume_issue))+
  end

  rule journal
    italicized_phrase
  end

  rule book_reference
    (authors citation_year '. ' book_title ': ' pagination place '.' (s note)?) {
      value =
        { :authors => authors.strip,
          :citation_year => citation_year.to_s,
          :title => book_title.to_s,
          :place => place.to_s,
          :pagination => pagination.to_s,
          :reference_type => 'BookReference'
        }
      value[:note] = note.value if note
      value
    }
  end

  rule book_title
    italicized_phrase post_book_title?
  end

  rule post_book_title
    (bold_phrase | /[^<:]/+)+
  end

  rule authors
    /\D+/
  end

  rule citation_year
    /\d{4}\w?/
  end

  rule series_volume_issue
    phrase? bold_phrase /[^:]*/
  end

  rule note
    (/\[/ note_contents:/[^\]]+/ /\]/) {
      s = note_contents.strip
      s = s[-1..-1] == '.' ? s[0..-2] : s
    }
  end

  rule place
    /[^\.]+/
  end

  #-------------------------------------------
  rule phrase
    /[^<]+/
  end

  rule phrase_without_colon
    /[^:]+/
  end

  rule unformatted_phrase
    span_phrase | phrase
  end

  rule bold_phrase
    bold phrase tag_end
  end 

  rule italicized_phrase
    italic phrase tag_end
  end

  rule span_phrase
    span phrase tag_end
  end

end
