require:
  - rubocop-performance
  - rubocop-rails
  - rubocop-rake
  - rubocop-rspec

AllCops:
  NewCops: enable
  Exclude:
    - 'bin/**/*'
    - 'cookbooks/**/*'
    - 'data/**/*'
    - 'db/schema.rb'
    - 'node_modules/**/*'
    - 'solr/**/*'
    - 'tmp/**/*'
    - 'vendor/**/*'

### Layout.

Layout/ArgumentAlignment:
  EnforcedStyle: with_fixed_indentation

Layout/BlockAlignment:
  Enabled: false

Layout/ClassStructure:
  Enabled: true

# Use trailing dot to make it easier to copy-paste into the console.
Layout/DotPosition:
  EnforcedStyle: trailing

# Disabled because guard clauses w/o empty lines look OK in short methods.
Layout/EmptyLineAfterGuardClause:
  Enabled: false

Layout/FirstArrayElementLineBreak:
  Enabled: true

Layout/FirstHashElementLineBreak:
  Enabled: true

Layout/FirstMethodArgumentLineBreak:
  Enabled: true

Layout/FirstMethodParameterLineBreak:
  Enabled: true

# Disabled because aligning keys/values improves readability of some hashes.
Layout/HashAlignment:
  Enabled: false
  EnforcedLastArgumentHashStyle: ignore_implicit

Layout/HeredocArgumentClosingParenthesis:
  Enabled: true

Layout/IndentationConsistency:
  EnforcedStyle: indented_internal_methods

Layout/LineEndStringConcatenationIndentation:
  Exclude:
    - 'spec/**/*'

Layout/LineLength:
  Max: 135
  Exclude:
    - 'app/controllers/quick_and_dirty_fixes_controller.rb'
    - 'app/database_scripts/database_scripts/**/*'

Layout/MultilineHashKeyLineBreaks:
  Enabled: true

# Disabled due to needless alignment and because multiline method calls are a lost cause anyways.
Layout/MultilineMethodCallIndentation:
  Enabled: false

Layout/MultilineOperationIndentation:
  EnforcedStyle: indented

# Disabled for files included in `rails app:update`.
Layout/SpaceInsideArrayLiteralBrackets:
  Exclude:
    - 'config/environments/production.rb'
    - 'config/environments/staging.rb'

### Lint.

Lint/AmbiguousBlockAssociation:
  Exclude:
    - 'spec/**/*'

Lint/ConstantDefinitionInBlock:
  Exclude:
    - 'lib/tasks/**/*.rake'

# Disabled because duplicated branch bodies are most often co-incidental duplication and/or added for clarity.
Lint/DuplicateBranch:
  Enabled: false

Lint/EmptyBlock:
  Exclude:
    - 'spec/factories/**/*' # For transient attributes.

Lint/HeredocMethodCallPosition:
  Enabled: true

Lint/RequireRelativeSelfPath:
  Exclude:
    - 'lib/tasks/**/*.rake'

Lint/UselessAccessModifier:
  MethodCreatingMethods:
    - delegate

# Metrics.

Metrics/AbcSize:
  Enabled: false

Metrics/BlockLength:
  Enabled: false
  Exclude:
    - 'app/database_scripts/database_scripts/**/*'
    - 'config/environments/**/*'
    - 'config/routes.rb'
    - 'lib/tasks/**/*.rake'
    - 'spec/**/*'

Metrics/ClassLength:
  Enabled: false
  Max: 100
  CountAsOne:
    - array
    - hash
    - heredoc
  Exclude:
    - 'app/cleanup/**/*'
    - 'app/controllers/quick_and_dirty_fixes_controller.rb'
    - 'app/database_scripts/**/*'

Metrics/CyclomaticComplexity:
  Enabled: false

Metrics/MethodLength:
  Enabled: false
  Exclude:
    - 'app/database_scripts/database_scripts/**/*'

Metrics/ModuleLength:
  Enabled: false

Metrics/ParameterLists:
  CountKeywordArgs: false

Metrics/PerceivedComplexity:
  Max: 12
  Enabled: false

### Naming.

Naming/MemoizedInstanceVariableName:
  EnforcedStyleForLeadingUnderscores: required

Naming/VariableNumber:
  Exclude:
    - 'lib/tasks/seed/relational_history_items.rb'
    - 'spec/**/*'

### Performance.

# Disabled because `filter_map` and `map.compact` are not identical.
Performance/MapCompact:
  Enabled: false

Performance/MethodObjectAsBlock:
  Enabled: false

Performance/Casecmp:
  Enabled: false

### Rails.

Rails/BulkChangeTable:
  Enabled: false

Rails/DefaultScope:
  Enabled: true

# Disabled because delegations are in some cases less readable and/or harder to grep for.
Rails/Delegate:
  Enabled: false

# Disabled because it flags dev ENV variables.
Rails/EnvironmentVariableAccess:
  Enabled: false

# TODO: Maybe enable and use `dependent: nil` for "read-only" associations.
Rails/HasManyOrHasOneDependent:
  Enabled: false

# Disabled because the site is only available in English (and there are tons of hardcoded translations in views and elsewhere).
Rails/I18nLocaleTexts:
  Enabled: false

# Disabled because we don't need to add `inverse_of` to all associations for the sake of it.
Rails/InverseOf:
  Enabled: false

Rails/Output:
  Exclude:
    - 'lib/tasks/**/*'

# Disabled because there are too many cases ;)
Rails/OutputSafety:
  Enabled: false
  Exclude:
    - 'app/database_scripts/database_scripts/**/*'

# Disabled because not all tasks require `:environment`.
Rails/RakeEnvironment:
  Enabled: false

# Disabled because it does not consider string constants to be strings.
Rails/ReflectionClassName:
  Enabled: false

Rails/RenderInline:
  Enabled: false

# Disabled because it flags many false positives.
Rails/SaveBang:
  Enabled: false
  AllowedReceivers:
    - 'ProgressBar'
    - 'reference_form' # Actually `ReferenceForm`.

Rails/SkipsModelValidations:
  Exclude:
    - 'lib/tasks/**/*.rake'
    - 'spec/**/*'

Rails/UnknownEnv:
  Environments:
    - production
    - development
    - test
    - staging

# Disabled because it's not safe (for example with handwritten SQL/joins).
Rails/WhereEquals:
  Enabled: false

# Disabled because it makes queries less chainable which makes them harder to test/debug in the console.
Rails/WhereExists:
  Enabled: false

# Disabled because it's not safe (for example with handwritten SQL/joins).
Rails/WhereNot:
  Enabled: false

# Indexes are not case sensitive in MySQL. Revisit if we ever migrate to Postgres.
Rails/UniqueValidationWithoutIndex:
  Enabled: false

Rails/Validation:
  Enabled: false

### Rake.

# Disabled because not all Rake tasks should be included in `rake -T`.
Rake/Desc:
  Enabled: false

### RSpec.

# Disabled because identity comparisons do not matter for `true/false/nil`.
RSpec/BeEq:
  Enabled: false

# Disabled because it's useful to add empty placeholders.
RSpec/EmptyExampleGroup:
  Enabled: false

RSpec/ExampleLength:
  Enabled: false

RSpec/ExpectChange:
  EnforcedStyle: block

RSpec/FactoryBot/CreateList:
  EnforcedStyle: n_times

RSpec/FilePath:
  CustomTransform:
    AntCatVersionLink: antcat_version_link
    ParseAntCatTags: parse_antcat_tags

# Disabled because grouped Shoulda Matchers makes sense sometimes.
RSpec/ImplicitSubject:
  Enabled: false
  EnforcedStyle: single_statement_only

RSpec/LetSetup:
  Enabled: false

RSpec/MessageSpies:
  Enabled: false

# Disabled because it misunderstands "one expectation per spec" (don't test unrelated behavior in one spec) as "one `expect`".
RSpec/MultipleExpectations:
  Enabled: false

RSpec/MultipleMemoizedHelpers:
  Max: 8

RSpec/NestedGroups:
  Max: 6

RSpec/StubbedMock:
  Enabled: false

### Style.

Style/Alias:
  EnforcedStyle: prefer_alias_method

Style/ArrayCoercion:
  Enabled: true

Style/AutoResourceCleanup:
  Enabled: true

Style/CaseLikeIf:
  Enabled: false

Style/ClassCheck:
  EnforcedStyle: is_a?

Style/ClassEqualityComparison:
  Enabled: false

Style/CollectionMethods:
  Enabled: true

Style/CommentAnnotation:
  Keywords:
    - TODO
    - FIXME
    - OPTIMIZE
    - PERFORMANCE
    - HACK
    - REVIEW
    - NOTE
    - TMPCLEANUP

Style/DateTime:
  Enabled: true

# Disabled because we don't use that kind of documentation.
Style/Documentation:
  Enabled: false

Style/EmptyMethod:
  EnforcedStyle: expanded

Style/FrozenStringLiteralComment:
  EnforcedStyle: always_true

# Disabled for files included in `rails app:update`.
Style/GlobalStdStream:
  Exclude:
    - 'config/environments/production.rb'
    - 'config/environments/staging.rb'

# Disabled because it wants to split up independent/logical chunks of code.
Style/GuardClause:
  Enabled: false

# Disabled to avoid trailing "surprise if"s.
Style/IfUnlessModifier:
  Enabled: false

Style/Lambda:
  Enabled: false

Style/MethodDefParentheses:
  EnforcedStyle: require_no_parentheses_except_multiline

# Disabled because it's OK to chain blocks even of they span multiple lines.
Style/MultilineBlockChain:
  Enabled: false

# TODO: Disabled for now. Maybe enable.
Style/MutableConstant:
  Enabled: false

# Disabled because "Use underscores(_) as thousands separator and separate every 3 digits with them" makes IDs look weird.
Style/NumericLiterals:
  Enabled: false
  Exclude:
    - 'app/database_scripts/database_scripts/**/*'
    - 'spec/**/*'

# "This cop checks for redundant assignment before returning."
# Disabled because redundant assignment before returning are most often adde on purpose (more explicit).
Style/RedundantAssignment:
  Enabled: false

# Disabled to due to redundant begins blocks added on purpose for consistency.
Style/RedundantBegin:
  Enabled: false

Style/ReturnNil:
  Enabled: true

Style/Send:
  Enabled: true

Style/SingleArgumentDig:
  Enabled: false

Style/SingleLineBlockParams:
  Enabled: true

Style/SoleNestedConditional:
  Enabled: false

Style/StringConcatenation:
  Enabled: false

Style/StringLiterals:
  Enabled: false

Style/StringMethods:
  Enabled: true

Style/SymbolArray:
  Enabled: false

Style/TrailingCommaInBlockArgs:
  Enabled: true

# Disabled because underscores are more explicit and easier to spot.
Style/TrailingUnderscoreVariable:
  Enabled: false

Style/WordArray:
  Enabled: false
